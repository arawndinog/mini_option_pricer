from numpy import testing
import black_scholes
import american_option
import asian_option
import basket_option

print("Testing Asian options...")
print("Testing: sigma=0.3, N=50, K=100, option=put")
asian_option_model = asian_option.AsianOptionCal(sigma=0.3,N=50,S=100,K=100,T=3,r=0.05,M=100000,option="put")
print("  Geometric close-form:", asian_option_model.geometricClosedForm())
print("  Geometric with MC:", asian_option_model.geometricStandardMC())
print("  Arithmetic with MC:", asian_option_model.arithmeticStandardMC())
print("  Arithmetic with MC and control variate:", asian_option_model.arithmeticStandardMCWithCV())

print("Testing: sigma=0.3, N=100, K=100, option=put")
asian_option_model = asian_option.AsianOptionCal(sigma=0.3,N=100,S=100,K=100,T=3,r=0.05,M=100000,option="put")
print("  Geometric close-form:", asian_option_model.geometricClosedForm())
print("  Geometric with MC:", asian_option_model.geometricStandardMC())
print("  Arithmetic with MC:", asian_option_model.arithmeticStandardMC())
print("  Arithmetic with MC and control variate:", asian_option_model.arithmeticStandardMCWithCV())

print("Testing: sigma=0.4, N=50, K=100, option=put")
asian_option_model = asian_option.AsianOptionCal(sigma=0.4,N=50,S=100,K=100,T=3,r=0.05,M=100000,option="put")
print("  Geometric close-form:", asian_option_model.geometricClosedForm())
print("  Geometric with MC:", asian_option_model.geometricStandardMC())
print("  Arithmetic with MC:", asian_option_model.arithmeticStandardMC())
print("  Arithmetic with MC and control variate:", asian_option_model.arithmeticStandardMCWithCV())

print("Testing: sigma=0.3, N=50, K=100, option=call")
asian_option_model = asian_option.AsianOptionCal(sigma=0.3,N=50,S=100,K=100,T=3,r=0.05,M=100000,option="call")
print("  Geometric close-form:", asian_option_model.geometricClosedForm())
print("  Geometric with MC:", asian_option_model.geometricStandardMC())
print("  Arithmetic with MC:", asian_option_model.arithmeticStandardMC())
print("  Arithmetic with MC and control variate:", asian_option_model.arithmeticStandardMCWithCV())

print("Testing: sigma=0.3, N=100, K=100, option=call")
asian_option_model = asian_option.AsianOptionCal(sigma=0.3,N=100,S=100,K=100,T=3,r=0.05,M=100000,option="call")
print("  Geometric close-form:", asian_option_model.geometricClosedForm())
print("  Geometric with MC:", asian_option_model.geometricStandardMC())
print("  Arithmetic with MC:", asian_option_model.arithmeticStandardMC())
print("  Arithmetic with MC and control variate:", asian_option_model.arithmeticStandardMCWithCV())

print("Testing: sigma=0.4, N=50, K=100, option=call")
asian_option_model = asian_option.AsianOptionCal(sigma=0.4,N=50,S=100,K=100,T=3,r=0.05,M=100000,option="call")
print("  Geometric close-form:", asian_option_model.geometricClosedForm())
print("  Geometric with MC:", asian_option_model.geometricStandardMC())
print("  Arithmetic with MC:", asian_option_model.arithmeticStandardMC())
print("  Arithmetic with MC and control variate:", asian_option_model.arithmeticStandardMCWithCV())

print("Testing geometric basket options...")
print(basket_option.basketGeo(s0_1=100, s0_2=100, K=100, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="put").basketGeoPrice())
print(basket_option.basketGeo(s0_1=100, s0_2=100, K=100, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.9 ,option="put").basketGeoPrice())
print(basket_option.basketGeo(s0_1=100, s0_2=100, K=100, sigma_1=0.1, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="put").basketGeoPrice())
print(basket_option.basketGeo(s0_1=100, s0_2=100, K=80, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="put").basketGeoPrice())
print(basket_option.basketGeo(s0_1=100, s0_2=100, K=120, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="put").basketGeoPrice())
print(basket_option.basketGeo(s0_1=100, s0_2=100, K=100, sigma_1=0.5, sigma_2=0.5, r=0.05, T=3, rho=0.5 ,option="put").basketGeoPrice())

print(basket_option.basketGeo(s0_1=100, s0_2=100, K=100, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="call").basketGeoPrice())
print(basket_option.basketGeo(s0_1=100, s0_2=100, K=100, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.9 ,option="call").basketGeoPrice())
print(basket_option.basketGeo(s0_1=100, s0_2=100, K=100, sigma_1=0.1, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="call").basketGeoPrice())
print(basket_option.basketGeo(s0_1=100, s0_2=100, K=80, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="call").basketGeoPrice())
print(basket_option.basketGeo(s0_1=100, s0_2=100, K=120, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="call").basketGeoPrice())
print(basket_option.basketGeo(s0_1=100, s0_2=100, K=100, sigma_1=0.5, sigma_2=0.5, r=0.05, T=3, rho=0.5 ,option="call").basketGeoPrice())

print("Testing arithmetic basket options without control variate...")
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="put").pricing()[0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.9 ,option="put").pricing()[0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.1, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="put").pricing()[0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=80, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="put").pricing()[0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=120, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="put").pricing()[0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.5, sigma_2=0.5, r=0.05, T=3, rho=0.5 ,option="put").pricing()[0])

print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="call").pricing()[0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.9 ,option="call").pricing()[0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.1, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="call").pricing()[0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=80, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="call").pricing()[0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=120, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="call").pricing()[0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.5, sigma_2=0.5, r=0.05, T=3, rho=0.5 ,option="call").pricing()[0])

print("Testing arithmetic basket options with control variate...")
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="put", control_variate=True).pricing()[0][0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.9 ,option="put", control_variate=True).pricing()[0][0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.1, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="put", control_variate=True).pricing()[0][0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=80, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="put", control_variate=True).pricing()[0][0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=120, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="put", control_variate=True).pricing()[0][0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.5, sigma_2=0.5, r=0.05, T=3, rho=0.5 ,option="put", control_variate=True).pricing()[0][0])

print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="call", control_variate=True).pricing()[0][0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.9 ,option="call", control_variate=True).pricing()[0][0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.1, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="call", control_variate=True).pricing()[0][0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=80, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="call", control_variate=True).pricing()[0][0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=120, sigma_1=0.3, sigma_2=0.3, r=0.05, T=3, rho=0.5 ,option="call", control_variate=True).pricing()[0][0])
print(basket_option.basketArith(s0_1=100, s0_2=100, K=100, sigma_1=0.5, sigma_2=0.5, r=0.05, T=3, rho=0.5 ,option="call", control_variate=True).pricing()[0][0])

print("Testing completed.")
